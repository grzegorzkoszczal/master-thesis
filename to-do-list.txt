What has been achieved:
1.  Work is re-written in LaTeX: You can ask supervisor if
    this format is acceptable
2.  Tests have been performed on university cluster
    (sanna.kask) using command below:
    taskset --cpu-list 0-15 perf stat -e power/energy-cores/,power/energy-gpu/,power/energy-pkg/ ./ft.C
3.  NPB have class sizes for both CPU and GPU benchmarks, but none of them can run on multiple GPUs.
    Therefore, for tests on 2 or more GPUs I suggest to use code from research project. We can define
    class sizes on that problem as the train dataset size: for purpose of our research we used 69 classes
    with a total of 10,000 images to train, we can call that, for example a class=A, next the train
    dataset of 20,000 images would be called class=B and so on, to a maximum of over 80k images on largest
    class.
4.  How to run benchmarks on BOTH CPU(s) and GPU(s)? My initial solution is to execute both codes compiled
    for CPUs and GPUs at the same time: code written in CUDA will execute much faster on the same problem
    and the same class size on GPU that code in C++ for CPU, therefore I should create a controlling script
    that will run the GPU benchmark again, as long as the code on CPU is still computing. When the CPU
    benchmark ends successfully, then a SIGTERM is send to end the GPU code, resulting in fully utilizing
    the resources of both CPUs and GPUs during the tests.
5.  Show the workflow (preparation of the servers and used configurations) from the presentation
    for Master Thesis Seminar.

What is already planned to do / questions to the supervisor:
1.  Add the preliminary tests from presentation, about
    choosing the correct CPU benchmarks as well as correct
    class sizes. (as a preliminary tests section, maybe
    shout-out to my local rig? She deserved it :3 )
1.  Ask about the configurations. Are they sufficient? Or we
    plan to run the tests on 2 nodes using 2 power meters
    (may require additional software such as pssh)
2.  Ask about the status of the current power meter (old one)
    and the status / plans for the second power meter.
3.  Ask the administrator of the servers to install rest
    of the necessary software (parallel-ssh in order to
    work and run benchmarks on two nodes, pip in order
    to re-install yoko-tool software for )
4.  Should I write abstract in Polish aswell?
5.  Should I write names of chapters, bibliography etc. 
    in all upper case?


What to do next (conclusions after consultations):
1.  Testować i korygować wyniki, ale najważniejsze- odpalać testy








OTHER:
measurements of CPU power draw:
1. You (probably) need sudo to execute that command! (edit: only on LOCAL machine actually)
2. sudo perf stat -e power/energy-cores/,power/energy-gpu/,power/energy-pkg/ ./ft.C
3. We get energy consumed in Joules and time elapsed in seconds.

Useful link:
https://firefox-source-docs.mozilla.org/performance/perf.html


pinning the benchmark tasks to logical cores:
all cores on local machine:
time taskset --cpu-list 0-23 ./ft.C
sanna: 2 cpus, 10 threads each
time taskset --cpu-list 0-9,20-29 ./ft.C

useful links:
https://www.xmodulo.com/run-program-process-specific-cpu-cores-linux.html
https://man.archlinux.org/man/taskset.1.en

ULTIMATE COMMAND:
time sudo taskset --cpu-list 0-15 perf stat -e power/energy-cores/,power/energy-gpu/,power/energy-pkg/ ./ft.C
!!!IMPORTANT: I need to used 'sudo' only on LOCAL machine, otherwise performance counters stats are
              marked as <not supported>. On university servers, it is not necessary - it works right
              off the bat, probably due to our admin being way more knowledgable than me and adding me
              as 'sudoer' to this command (Thanks Mr. Boiński!)


ENTIRE 'yokotool.py':
import os
measurements_dir = "/home/macierz/s175405/ResearchProject12KASK/benchmark/measurements/"
power_level = open("power_level.txt","r")
test_index = open("test_index.txt","r")
used_gpus = open("used_gpus.txt","r")
os.system("yokotool /dev/usbtmc0 --pmtype wt310 read T,P -o "+measurements_dir+used_gpus.read()+"GPUS/"+power_level>



ACHTUNG!!!

Add the preliminary tests from presentation, about choosing the correct CPU benchmarks as well as correct class sizes

/proc/cpuinfo

komentarz: w tym pliku są po kolei wymieniowe logidzne procesory i w kazdym z nich będą linijki opisu
i tam bedzie taka informacja jak id core'a, 
samo sprawdzenie na htop'ie nie wystarczy, trzeba sie upewnic

// ==========
1 CPU:
1 thread:
time taskset --cpu-list 0 ./is.D
real:   10m45.781s

5 threads
time taskset --cpu-list 0-4 ./is.D
real:   2m23.910s

10 threads:
time taskset --cpu-list 0-9 ./is.D
real:   1m15.647s

20 threads:
time taskset --cpu-list 0-19 ./is.D
real:   0m44.371s

// ==========
2 CPUs:
2 threads:
time taskset --cpu-list 0,20 ./is.D
real:   7m42.465s

10 threads:
time taskset --cpu-list 0-4,20-24 ./is.D
real:   1m39.325s

20 threads:
time taskset --cpu-list 0-9,20-29 ./is.D
real:   0m56.676s

40 threads:
time taskset --cpu-list 0-39 ./is.D
real:   0m36.360s


czestotliwosc próbkowania
czy maximum na yokogawie 10hz jest dobre? czy może wybrać 5hz czy 2hz? porobić próby


jak częscto linux perf / intel rapl próbkuje? w przeciwienstwie to NVML'a czy yokogawy,
mamy pomiary co 0.1s, a perf daje nam calkowite zuzycie energi po wykonaniu sie benchmarku



to benchmarku na 2 node'ach KONEICZNIE aplikacja w MPI, bo pozwala działać na 2 węzłach
(są NPB-MPI), która działa na 2 wezlach i pozwala na ustalenie rozmiarów danych



finalnie trzeba bedzie raportowac średnia oraz odchylenie standardowe
(jak w artykule naukoweym)
takze 10 testów, gdzie odpalam benchmark




papiery przedluzające, dopytac sie w dziekanacie wniosek o przedluzenie (prodziekan Raczyński)
argumentować to faktem, że wyniki z tej pracy magisterskiej mogą byc wykorzystane w ew artykule naukowym


Yokogawy mogą być podłączone do apl15 oraz apl16


Dr Boiński wraca 4 września

GNU Plot to tworzenia wykresów