What has been achieved:
1.  Work is re-written in LaTeX: You can ask supervisor if
    this format is acceptable
2.  Tests have been performed on university cluster
    (sanna.kask) using command below:
    taskset --cpu-list 0-15 perf stat -e power/energy-cores/,power/energy-gpu/,power/energy-pkg/ ./ft.C



What is already planned to do / questions to the supervisor:
1.  Add the preliminary tests from presentation, about
    choosing the correct CPU benchmarks as well as correct
    class sizes. (as a preliminary tests section, maybe
    shout-out to my local rig? She deserved it :3 )
1.  Ask about the configurations. Are they sufficient? Or we
    plan to run the tests on 2 nodes using 2 power meters
    (may require additional software such as pssh)
2.  Ask about the status of the current power meter (old one)
    and the status / plans for the second power meter.
3.  Ask the administrator of the servers to install rest
    of the necessary software (parallel-ssh in order to
    work and run benchmarks on two nodes, pip in order
    to re-install yoko-tool software for )


What to do next (conclusions after consultations):









OTHER:
measurements of CPU power draw:
1. You (probably) need sudo to execute that command! (edit: only on LOCAL machine actually)
2. sudo perf stat -e power/energy-cores/,power/energy-gpu/,power/energy-pkg/ ./ft.C
3. We get energy consumed in Joules and time elapsed in seconds.

Useful link:
https://firefox-source-docs.mozilla.org/performance/perf.html


pinning the benchmark tasks to logical cores:
all cores on local machine:
time taskset --cpu-list 0-23 ./ft.C
sanna: 2 cpus, 10 threads each
time taskset --cpu-list 0-9,20-29 ./ft.C

useful links:
https://www.xmodulo.com/run-program-process-specific-cpu-cores-linux.html
https://man.archlinux.org/man/taskset.1.en

ULTIMATE COMMAND:
time sudo taskset --cpu-list 0-15 perf stat -e power/energy-cores/,power/energy-gpu/,power/energy-pkg/ ./ft.C
!!!IMPORTANT: I need to used 'sudo' only on LOCAL machine, otherwise performance counters stats are
              marked as <not supported>. On university servers, it is not necessary - it works right
              off the bat, probably due to our admin being way more knowledgable than me and adding me
              as 'sudoer' to this command (Thanks Mr. BoiÅ„ski!)


ENTIRE 'yokotool.py':
import os
measurements_dir = "/home/macierz/s175405/ResearchProject12KASK/benchmark/measurements/"
power_level = open("power_level.txt","r")
test_index = open("test_index.txt","r")
used_gpus = open("used_gpus.txt","r")
os.system("yokotool /dev/usbtmc0 --pmtype wt310 read T,P -o "+measurements_dir+used_gpus.read()+"GPUS/"+power_level>



ACHTUNG!!!

Add the preliminary tests from presentation, about choosing the correct CPU benchmarks as well as correct class sizes



// ==========
1 CPU:
1 thread:
time taskset --cpu-list 0 ./is.D
real:   10m45.781s

5 threads
time taskset --cpu-list 0-4 ./is.D
real:   2m23.910s

10 threads:
time taskset --cpu-list 0-9 ./is.D
real:   1m15.647s

20 threads:
time taskset --cpu-list 0-19 ./is.D
real:   0m44.371s

// ==========
2 CPUs:
2 threads:
time taskset --cpu-list 0,20 ./is.D
real:   7m42.465s

10 threads:
time taskset --cpu-list 0-4,20-24 ./is.D
real:   1m39.325s

20 threads:
time taskset --cpu-list 0-9,20-29 ./is.D
real:   0m56.676s

40 threads:
time taskset --cpu-list 0-39 ./is.D
real:   0m36.360s